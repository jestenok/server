# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Release.Name }}

---

apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-tls
  namespace: {{ .Release.Name }}
type: kubernetes.io/tls
data:
  tls.crt: {{ .Values.cert | b64enc }}
  tls.key: {{ .Values.key | b64enc }}

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: {{ .Release.Name }}
  name: {{ .Release.Name }}-ingress
#  annotations:
#    kubernetes.io/ingress.class: "nginx"
#    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
#    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
#    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # Uncomment next if you use https://cert-manager.io/
    #cert-manager.io/cluster-issuer: "<YOUR CLUSTER ISSUER>"
spec:
  tls:
  - hosts:
    - {{ .Values.host }}
    secretName: {{ .Release.Name }}-tls
  rules:
  - host: {{ .Values.host }}
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: {{ .Release.Name }}
              port:
                number: 9090

---

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: {{ .Release.Name }}
  name: {{ .Release.Name }}
  namespace: {{ .Release.Name }}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: {{ .Release.Name }}

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: {{ .Release.Name }}

---

kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: {{ .Release.Name }}
  name: {{ .Release.Name }}
  namespace: {{ .Release.Name }}
spec:
  ports:
    - port: 9090
      targetPort: 9090
  selector:
    k8s-app: {{ .Release.Name }}

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: {{ .Release.Name }}
  name: {{ .Release.Name }}-certs
  namespace: {{ .Release.Name }}
type: Opaque

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: {{ .Release.Name }}
  name: {{ .Release.Name }}-csrf
  namespace: {{ .Release.Name }}
type: Opaque
data:
  csrf: ""

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: {{ .Release.Name }}
  name: {{ .Release.Name }}-key-holder
  namespace: {{ .Release.Name }}
type: Opaque

---

kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    k8s-app: {{ .Release.Name }}
  name: {{ .Release.Name }}-settings
  namespace: {{ .Release.Name }}

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    k8s-app: {{ .Release.Name }}
  name: {{ .Release.Name }}
  namespace: {{ .Release.Name }}
rules:
  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["{{ .Release.Name }}-key-holder", "{{ .Release.Name }}-certs", "{{ .Release.Name }}-csrf"]
    verbs: ["get", "update", "delete"]
    # Allow Dashboard to get and update '{{ .Release.Name }}-settings' config map.
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["{{ .Release.Name }}-settings"]
    verbs: ["get", "update"]
    # Allow Dashboard to get metrics.
  - apiGroups: [""]
    resources: ["services"]
    resourceNames: ["heapster", "dashboard-metrics-scraper"]
    verbs: ["proxy"]
  - apiGroups: [""]
    resources: ["services/proxy"]
    resourceNames: ["heapster", "http:heapster:", "https:heapster:", "dashboard-metrics-scraper", "http:dashboard-metrics-scraper"]
    verbs: ["get"]

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    k8s-app: {{ .Release.Name }}
  name: {{ .Release.Name }}
rules:
  # Allow Metrics Scraper to get metrics from the Metrics server
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods", "nodes"]
    verbs: ["get", "list", "watch"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    k8s-app: {{ .Release.Name }}
  name: {{ .Release.Name }}
  namespace: {{ .Release.Name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ .Release.Name }}
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}
    namespace: {{ .Release.Name }}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Release.Name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Release.Name }}
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}
    namespace: {{ .Release.Name }}

---

kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    k8s-app: {{ .Release.Name }}
  name: {{ .Release.Name }}
  namespace: {{ .Release.Name }}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        k8s-app: {{ .Release.Name }}
    spec:
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: {{ .Release.Name }}
          image: kubernetesui/dashboard:v2.7.0
          imagePullPolicy: Always
          ports:
            - containerPort: 9090
              protocol: TCP
          args:
            - --namespace={{ .Release.Name }}
            - --disable-settings-authorizer
            - --enable-insecure-login
            - --insecure-bind-address=0.0.0.0
            - --authentication-mode=token
          volumeMounts:
            - name: {{ .Release.Name }}-certs
              mountPath: /certs
              # Create on-disk volume to store exec logs
            - name: tmp-volume
              mountPath: /tmp
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 2001
      volumes:
        - name: {{ .Release.Name }}-certs
          secret:
            secretName: {{ .Release.Name }}-certs
        - name: tmp-volume
          emptyDir: {}
      serviceAccountName: {{ .Release.Name }}
      nodeSelector:
        "kubernetes.io/os": linux
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule

---

kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: dashboard-metrics-scraper
  name: dashboard-metrics-scraper
  namespace: {{ .Release.Name }}
spec:
  ports:
    - port: 8000
      targetPort: 8000
  selector:
    k8s-app: dashboard-metrics-scraper

---

kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    k8s-app: dashboard-metrics-scraper
  name: dashboard-metrics-scraper
  namespace: {{ .Release.Name }}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: dashboard-metrics-scraper
  template:
    metadata:
      labels:
        k8s-app: dashboard-metrics-scraper
    spec:
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: dashboard-metrics-scraper
          image: kubernetesui/metrics-scraper:v1.0.8
          ports:
            - containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: 8000
            initialDelaySeconds: 30
            timeoutSeconds: 30
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 2001
      serviceAccountName: {{ .Release.Name }}
      nodeSelector:
        "kubernetes.io/os": linux
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      volumes:
        - name: tmp-volume
          emptyDir: {}

# all flags
#--alsologtostderr                  log to standard error as well as files
#--api-log-level string             level of API request logging, should be one of 'NONE', 'INFO' or 'DEBUG' (default "INFO")
#--apiserver-host string            address of the Kubernetes API server to connect to in the format of protocol://address:port, leave it empty if the binary runs inside cluster for local discovery attempt
#--authentication-mode strings      enabled authentication options, supports 'token' and 'basic' that should only be used if Kubernetes API server has --authorization-mode=ABAC and --basic-auth-file flags set (default [token])
#--auto-generate-certificates       enables automatic certificates generation used to serve HTTPS
#--bind-address ip                  IP address on which to serve the --port, set to 0.0.0.0 for all interfaces (default 0.0.0.0)
#--default-cert-dir string          directory path containing files from --tls-cert-file and --tls-key-file, used also when auto-generating certificates flag is set (default "/certs")
#--disable-settings-authorizer      disables settings page user authorizer so anyone can access settings page
#--enable-insecure-login            enables login view when the app is not served over HTTPS
#--enable-skip-login                enables skip button on the login page
#--heapster-host string             address of the Heapster API server to connect to in the format of protocol://address:port, leave it empty if the binary runs inside cluster for service proxy usage
#--insecure-bind-address ip         IP address on which to serve the --insecure-port, set to 127.0.0.1 for all interfaces (default 127.0.0.1)
#--insecure-port int                port to listen to for incoming HTTP requests (default 9090)
#--kubeconfig string                path to kubeconfig file with authorization and master location information
#--locale-config string             path to file containing the locale configuration (default "./locale_conf.json")
#--log_backtrace_at traceLocation   when logging hits line file:N, emit a stack trace (default :0)
#--log_dir string                   If non-empty, write log files in this directory
#--logtostderr                      log to standard error instead of files
#--metric-client-check-period int   time interval between separate metric client health checks in seconds (default 30)
#--metrics-provider string          select provider type for metrics, 'none' will not check metrics (default "sidecar")
#--namespace string                 if non-default namespace is used encryption key will be created in the specified namespace (default "kube-system")
#--port int                         secure port to listen to for incoming HTTPS requests (default 8443)
#--sidecar-host string              address of the Sidecar API server to connect to in the format of protocol://address:port, leave it empty if the binary runs inside cluster for service proxy usage
#--stderrthreshold severity         logs at or above this threshold go to stderr (default 2)
#--system-banner string             system banner message displayed in the app if non-empty, it accepts simple HTML
#--system-banner-severity string    severity of system banner, should be one of 'INFO', 'WARNING' or 'ERROR' (default "INFO")
#--tls-cert-file string             file containing the default x509 certificate for HTTPS
#--tls-key-file string              file containing the default x509 private key matching --tls-cert-file
#--token-ttl int                    expiration time in seconds of JWE tokens generated by dashboard, set to 0 to avoid expiration (default 900)
#-v, --v Level                          log level for V logs
#--vmodule moduleSpec               comma-separated list of pattern=N settings for file-filtered logging
